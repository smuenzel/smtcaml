name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        ocaml-compiler:
          - 4.14.1

    steps:
    - name: install dep packages
      run: sudo apt-get install -y zsh libboost-serialization-dev
    - uses: actions/checkout@v3
      with:
          submodules: recursive
    - uses: actions/setup-python@v4
      with:
        cache: 'pip'
    - run: pip install tomli
    - name: Use OCaml ${{ matrix.ocaml-compiler }}
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: ${{ matrix.ocaml-compiler }}
        dune-cache: true
    - name: Install opam dependencies
      run: opam install core core_kernel core_unix ocaml_intrinsics dune z3 higher_kinded --yes
    - name: Cache vendor builds
      id: cache-vendor
      uses: actions/cache@v3
      with:
        path: vendor/build
        key: ${{hashFiles('vendor/vendor-boolector','vendor/vendor-cvc5','vendor/vendor-stp')}}
    - if: ${{ steps.cache-vendor.outputs.cache-hit != 'true' }}
      name: build vendor-boolector
      run: cd vendor/vendor-boolector && ./build-all.sh
    - if: ${{ steps.cache-vendor.outputs.cache-hit != 'true' }}
      name: build vendor-cvc5
      run: cd vendor/vendor-cvc5 && ./build-all.sh
    - if: ${{ steps.cache-vendor.outputs.cache-hit != 'true' }}
      name: build vendor-stp
      run: cd vendor/vendor-stp && ./build-all.sh
    - name: dune build
      run: opam exec -- dune build  @all
    - name: dune runtest
      run: opam exec -- dune build  @runtest
